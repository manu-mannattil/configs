# vim: ft=conf fdm=marker et sts=2 sw=2

# Session options {{{1
# --------------------

# Pane numbering should start from 1 and not 0.
set-option -g base-index 1

# Default command to be used for new windows.
set-option -g default-command bash

# The `tmux-256color' terminfo is now shipped with Ubuntu, but on using it,
# some things (such as being able to select stuff in Vim using the mouse)
# break. So unless it gets accepted widely, it's safer to stick to
# screen-256color.
set-option -g default-terminal "screen-256color"

# The time in milliseconds for which tmux waits after an escape is input to
# determine if it is part of a function or meta key sequences.
set-option -g escape-time 0

# The maximum number of lines held in a window's history.
set-option -g history-limit 50000

# Capture the mouse and allows mouse events to be bound as key bindings.
set-option -g mouse on

# When a window is closed, rename the other windows in numerical order.
set-option -g renumber-windows on

# Appearance {{{1
# ---------------

# Status line.
set-option -g status-bg "default"
set-option -g status-fg "default"
set-option -g status-left "#[fg=brightgreen]#S #[fg=brightwhite]: "
set-option -g status-right "#[fg=brightyellow](#h)"
set-option -g window-status-format "#[fg=brightcyan]#I #W"
set-option -g window-status-current-format "#[fg=brightmagenta][ #[fg=brightwhite]#I #W #[fg=brightmagenta]]"

# Make the border of the active pane more conspicuous.
set-option -g pane-active-border-fg brightgreen
set-option -g pane-border-fg brightblack

# Window options {{{1
# -------------------

# Rename windows automatically based on `automatic-rename-format'.
set-window-option -g automatic-rename on
set-window-option -g automatic-rename-format "#{pane_current_command}"

# Set terminal window titles.
set-option -g set-titles on
set-option -g set-titles-string "#I:#W"

# Keybindings {{{1
# ----------------

# Change the prefix from C-b to C-q.
unbind C-b
set-option -g prefix ^Q
bind q send-prefix

# Split windows with the same directory as the current window.
bind s split-window -v -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"

# vi-style key bidings for copy mode.
set-window-option -g mode-keys vi

# Move around panes with hjkl.
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Resize panes like Vim.
bind < resize-pane -L 4
bind > resize-pane -R 4
bind - resize-pane -D 4
bind + resize-pane -U 4

# vim-tmux integration {{{2
# -------------------------
#
# Intelligently navigate tmux panes and Vim splits using the same keys.
# See https://sunaku.github.io/tmux-select-pane.html for documentation.
#
#      +-------------+------------+-----------------------------+
#      | inside Vim? | is Zoomed? | Action taken by key binding |
#      +-------------+------------+-----------------------------+
#      | No          | No         | Focus directional tmux pane |
#      | No          | Yes        | Nothing: ignore key binding |
#      | Yes         | No         | Seamlessly focus Vim / tmux |
#      | Yes         | Yes        | Focus directional Vim split |
#      +-------------+------------+-----------------------------+
#
vim_navigation_timeout=0.05 # number of seconds we give Vim to navigate
navigate='                                                             \
  pane_is_zoomed() {                                                   \
    test #{window_zoomed_flag} -eq 1;                                  \
  };                                                                   \
  pane_title_changed() {                                               \
    test "#{pane_title}" != "$(tmux display -p "##{pane_title}")";     \
  };                                                                   \
  command_is_vim() {                                                   \
    case "${1%% *}" in                                                 \
      (vi|?vi|vim*|?vim*|view|?view|vi??*) true ;;                     \
      (*) false ;;                                                     \
    esac;                                                              \
  };                                                                   \
  pane_contains_vim() {                                                \
    case "#{=3:pane_current_command}" in                               \
      (ssh|sh) command_is_vim "#{=5:pane_title}" ;;                    \
      (*) command_is_vim "#{=5:pane_current_command}" ;;               \
    esac;                                                              \
  };                                                                   \
  pane_contains_neovim_terminal() {                                    \
    test "#{=12:pane_title}" = "nvim term://";                         \
  };                                                                   \
  navigate() {                                                         \
    tmux_navigation_command=$1;                                        \
    vim_navigation_command=$2;                                         \
    vim_navigation_only_if=${3:-true};                                 \
    if pane_contains_vim && eval "$vim_navigation_only_if"; then       \
      if pane_contains_neovim_terminal; then                           \
        tmux send-keys C-\\ C-n;                                       \
      fi;                                                              \
      eval "$vim_navigation_command";                                  \
      if ! pane_is_zoomed; then                                        \
        sleep $vim_navigation_timeout; : wait for Vim to change title; \
        if ! pane_title_changed; then                                  \
          eval "$tmux_navigation_command";                             \
        fi;                                                            \
      fi;                                                              \
    elif ! pane_is_zoomed; then                                        \
      eval "$tmux_navigation_command";                                 \
    fi;                                                                \
  };                                                                   \
navigate '
navigate_left=" $navigate 'tmux select-pane -L'  'tmux send-keys C-w h'"
navigate_down=" $navigate 'tmux select-pane -D'  'tmux send-keys C-w j'"
navigate_up="   $navigate 'tmux select-pane -U'  'tmux send-keys C-w k'"
navigate_right="$navigate 'tmux select-pane -R'  'tmux send-keys C-w l'"
navigate_back=" $navigate 'tmux select-pane -l || tmux select-pane -t1'\
                          'tmux send-keys C-w p'                       \
                          'pane_is_zoomed'                             "

bind-key -n C-h run-shell -b "$navigate_left"
bind-key -n C-j run-shell -b "$navigate_down"
bind-key -n C-k run-shell -b "$navigate_up"
bind-key -n C-l run-shell -b "$navigate_right"
bind-key -n C-b run-shell -b "$navigate_back"
