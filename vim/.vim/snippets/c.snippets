snippet com
	/* com: : ${TMPDIR:=/tmp/} ${CC=gcc}
	 * com: \{ ${CC} {} -o ${TMPDIR}{/.}; \} && ${TMPDIR}{/.} {@}
	 */


snippet .
	[${1}]${2}

snippet def
	#define ${1:NAME} ${2:replacement}

snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}

snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});

snippet el
	else {
		${1}
	}

snippet for
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* code */}
	}

snippet fpr
	fprintf(${1:stderr}, "${2:%s} "${3});${4}

snippet fun
	${1:void}
	${2:function_name}(${3})
	{
		${4:/* code */}
	}

snippet fund
	${1:void} ${2:function_name}(${3});${4}

snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}

snippet #if
	#if ${1:FOO}
		${2}
	#endif

snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif

snippet inc
	#include <${1:stdio}.h>${2}
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}

snippet main
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}

snippet once
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${2}

	#endif /* end of include guard: $1 */

snippet pr
	printf("${1:%s}", ${2});

snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}

snippet switch
	switch (${1:/* expression */}) {
		case ${2:/* const-expr */}:
		    ${3:/* code */}
		    break;
		default:
		    break;
	}

snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}

snippet td
	typedef ${1:int} ${2:MyCustomType};${3}

snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};

snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};

snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
